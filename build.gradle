apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'findbugs'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.5.1'
  }
}

repositories {
  mavenCentral()
  maven {
    url "https://swt-repo.googlecode.com/svn/repo/"
  }
}

apply from: 'gradle/publish.gradle'
apply from: 'gradle/swt.gradle'
apply from: 'gradle/integTest.gradle'
apply from: 'gradle/example.gradle'

defaultTasks 'build'

public String getPlatform(String platform) {
  switch (platform.replaceAll(' ', '').toLowerCase()) {
    case ~/.*linux.*/:  return 'linux'
    case ~/.*darwin.*/: return 'darwin'
    case ~/.*osx.*/:    return 'darwin'
    case ~/.*win.*/:    return 'windows'
    default:            return null
  }
}

ext {
  swtVersion = '4.3'
  swtArtifactName = "org.eclipse.swt.${swtWindowingLibrary}.${swtPlatform}.${swtArch}"

  platform = getPlatform(System.properties['os.name'])
}

dependencies {
  compile "org.eclipse.swt:${swtArtifactName}:${swtVersion}"
  testCompile "junit:junit:4.11"
  testCompile "org.mockito:mockito-all:1.9.5"
  examplesCompile "org.reflections:reflections:0.9.9-RC1"
}

task ragel(type:Exec) {
  ext.sourcePath = 'generated-src/java/com/readytalk/swt/text/tokenizer'
  ext.sourceName = 'WikiTextTokenizer.java'
  ext.destDir = new File(buildDir, sourcePath)
  workingDir = 'src/main/resources/ragel'
  ext.runRagel = false
    
  doFirst {
    def path = "ragel"
    def command = "which ragel"
    
    if (platform == 'windows') {
      command = "where ragel"
    }
    
    def proc = command.execute()   
    proc.waitFor()                 
    def rpath = "${proc.in.text}"
    if (rpath != null && rpath.length() > 0 && rpath.contains('ragel')) {
      runRagel = true
      destDir.mkdirs()
      path = rpath.trim()
    } else {
      logger.warn('')
      logger.warn('The Ragel finite-state machine compiler could not be found on the path.')
      logger.warn('This must be installed for compilation to succeed.')
      logger.warn('To install:')
      logger.warn('  - Debian & Debian Variants: sudo apt-get install ragel')
      logger.warn('  - OS X with Homebrew: brew install ragel')
      logger.warn('  - Windows: download from http://www.jgoettgens.de/Meine_Bilder_und_Dateien/ragel-vs2012.7z')
      logger.warn('For more installation information, please visit http://www.complang.org/ragel/')
      logger.warn('') 
    }
    
    commandLine path, '-J', '-o', file(destDir.getPath() + '/' + sourceName), sourceName + '.rl'
  }
}

compileJava { 
  dependsOn ragel
  source = ['src/main/java', 'build/generated-src/java'] 
  options.fork = true
} 

findbugs {
  reportLevel = "high"
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

task getVersion << {
  println version
}

apply from: 'gradle/idea.gradle'
